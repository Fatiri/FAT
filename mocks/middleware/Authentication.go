// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	middleware "github.com/Fatiri/fat/middleware"
	gin "github.com/gin-gonic/gin"

	mock "github.com/stretchr/testify/mock"

	repository "github.com/Fatiri/fat/repository"
)

// Authentication is an autogenerated mock type for the Authentication type
type Authentication struct {
	mock.Mock
}

// AuthMiddleware provides a mock function with given fields: roles
func (_m *Authentication) AuthMiddleware(roles []middleware.Role) gin.HandlerFunc {
	ret := _m.Called(roles)

	var r0 gin.HandlerFunc
	if rf, ok := ret.Get(0).(func([]middleware.Role) gin.HandlerFunc); ok {
		r0 = rf(roles)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gin.HandlerFunc)
		}
	}

	return r0
}

// CreateToken provides a mock function with given fields: account
func (_m *Authentication) CreateToken(account repository.Account) (string, error) {
	ret := _m.Called(account)

	var r0 string
	if rf, ok := ret.Get(0).(func(repository.Account) string); ok {
		r0 = rf(account)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(repository.Account) error); ok {
		r1 = rf(account)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyToken provides a mock function with given fields: token
func (_m *Authentication) VerifyToken(token string) (*middleware.Payload, error) {
	ret := _m.Called(token)

	var r0 *middleware.Payload
	if rf, ok := ret.Get(0).(func(string) *middleware.Payload); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*middleware.Payload)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
