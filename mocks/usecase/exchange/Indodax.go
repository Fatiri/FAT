// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/fat/models"

	repository "github.com/fat/repository"
)

// Indodax is an autogenerated mock type for the Indodax type
type Indodax struct {
	mock.Mock
}

// Info provides a mock function with given fields: ctx
func (_m *Indodax) Info(ctx context.Context) (*models.ResponseInfoIndodax, error) {
	ret := _m.Called(ctx)

	var r0 *models.ResponseInfoIndodax
	if rf, ok := ret.Get(0).(func(context.Context) *models.ResponseInfoIndodax); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ResponseInfoIndodax)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MarketHistory provides a mock function with given fields: ctx, payload
func (_m *Indodax) MarketHistory(ctx context.Context, payload models.MarketHistoryPayload) ([]models.MarketHistoryIndodax, error) {
	ret := _m.Called(ctx, payload)

	var r0 []models.MarketHistoryIndodax
	if rf, ok := ret.Get(0).(func(context.Context, models.MarketHistoryPayload) []models.MarketHistoryIndodax); ok {
		r0 = rf(ctx, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.MarketHistoryIndodax)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.MarketHistoryPayload) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MarketPendingtHistory provides a mock function with given fields: ctx, symbolPending
func (_m *Indodax) MarketPendingtHistory(ctx context.Context, symbolPending string) (*models.ResponseMarketPendingIndodax, error) {
	ret := _m.Called(ctx, symbolPending)

	var r0 *models.ResponseMarketPendingIndodax
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.ResponseMarketPendingIndodax); ok {
		r0 = rf(ctx, symbolPending)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ResponseMarketPendingIndodax)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, symbolPending)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Order provides a mock function with given fields: ctx, arg
func (_m *Indodax) Order(ctx context.Context, arg repository.CreateOrderParams) (*models.ResponseOrderIndodax, error) {
	ret := _m.Called(ctx, arg)

	var r0 *models.ResponseOrderIndodax
	if rf, ok := ret.Get(0).(func(context.Context, repository.CreateOrderParams) *models.ResponseOrderIndodax); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ResponseOrderIndodax)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, repository.CreateOrderParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderHistory provides a mock function with given fields: ctx, pair
func (_m *Indodax) OrderHistory(ctx context.Context, pair string) (*models.ResponseOrderHistoryIndodax, error) {
	ret := _m.Called(ctx, pair)

	var r0 *models.ResponseOrderHistoryIndodax
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.ResponseOrderHistoryIndodax); ok {
		r0 = rf(ctx, pair)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ResponseOrderHistoryIndodax)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, pair)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
