// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	widget "fyne.io/fyne/v2/widget"
	mock "github.com/stretchr/testify/mock"
)

// Form is an autogenerated mock type for the Form type
type Form struct {
	mock.Mock
}

// Login provides a mock function with given fields:
func (_m *Form) Login() (*widget.Form, *widget.Entry) {
	ret := _m.Called()

	var r0 *widget.Form
	if rf, ok := ret.Get(0).(func() *widget.Form); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*widget.Form)
		}
	}

	var r1 *widget.Entry
	if rf, ok := ret.Get(1).(func() *widget.Entry); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*widget.Entry)
		}
	}

	return r0, r1
}

// V1 provides a mock function with given fields:
func (_m *Form) V1() *widget.Form {
	ret := _m.Called()

	var r0 *widget.Form
	if rf, ok := ret.Get(0).(func() *widget.Form); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*widget.Form)
		}
	}

	return r0
}

// V2 provides a mock function with given fields:
func (_m *Form) V2() *widget.Form {
	ret := _m.Called()

	var r0 *widget.Form
	if rf, ok := ret.Get(0).(func() *widget.Form); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*widget.Form)
		}
	}

	return r0
}

// V3 provides a mock function with given fields: botRun
func (_m *Form) V3(botRun bool) *widget.Form {
	ret := _m.Called(botRun)

	var r0 *widget.Form
	if rf, ok := ret.Get(0).(func(bool) *widget.Form); ok {
		r0 = rf(botRun)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*widget.Form)
		}
	}

	return r0
}

// V4 provides a mock function with given fields:
func (_m *Form) V4() (*widget.Form, []*widget.Check) {
	ret := _m.Called()

	var r0 *widget.Form
	if rf, ok := ret.Get(0).(func() *widget.Form); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*widget.Form)
		}
	}

	var r1 []*widget.Check
	if rf, ok := ret.Get(1).(func() []*widget.Check); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*widget.Check)
		}
	}

	return r0, r1
}
